var searchIndex = {};
searchIndex['example'] = {"items":[[0,"","example","A simple example meant to demonstrate some basic usage of oxcable.",null,null]],"paths":[]};
searchIndex['test_midi'] = {"items":[[0,"","test_midi","Test script for monitoring MIDI input.",null,null]],"paths":[]};
searchIndex['test_second_order'] = {"items":[[0,"","test_second_order","Generates sample files for testing each second order filter mode.",null,null]],"paths":[]};
searchIndex['test_voice_array'] = {"items":[[0,"","test_voice_array","Test script with a simple instrument using `VoiceArray`.",null,null]],"paths":[]};
searchIndex['test_oscillators'] = {"items":[[0,"","test_oscillators","Generate sample files for testing each oscillator waveform.",null,null]],"paths":[]};
searchIndex['test_first_order'] = {"items":[[0,"","test_first_order","Generates sample files for testing each first order filter mode.",null,null]],"paths":[]};
searchIndex['test_audio_mirror'] = {"items":[[0,"","test_audio_mirror","Reads input from a microphone and mirrors it to a speaker ad nauseum.",null,null]],"paths":[]};
searchIndex['oxcable'] = {"items":[[0,"","oxcable","A signal processing framework for making music with rust.",null,null],[0,"chain","","A container for a series of audio devices.",null,null],[3,"DeviceChain","oxcable::chain","A container for a series of audio devices.",null,null],[11,"from","","Creates a new chain that starts from the provided device. This device\nwill receive no inputs unless they are manually supplied using\nDeviceChain::get_input.",0,{"inputs":[{"name":"devicechain"},{"name":"d"}],"output":{"name":"self"}}],[11,"into","","Appends the provided device to the end of the chain. This device will be\npassed the output of the last device as input. This method returns the\nsame chain it was passed.",0,{"inputs":[{"name":"devicechain"},{"name":"d"}],"output":{"name":"self"}}],[11,"get_input","","Return a mutable slice to the input of the first device in the chain.",0,null],[11,"get_output","","Returns a slice to the output of the last device in the chain.",0,null],[11,"tick","","",0,{"inputs":[{"name":"devicechain"}],"output":null}],[0,"error","oxcable","Provides a standardized error type for oxcable.",null,null],[4,"Error","oxcable::error","A global error type for all oxcable operations.",null,null],[13,"NoAudioDevices","","No audio resources can be opened.",1,null],[13,"NoMidiDevices","","No MIDI resources can be opened.",1,null],[13,"InvalidFile","","A file is not formatted properly.",1,null],[13,"OutOfRange","","A requested index is out of range.",1,null],[13,"CreatesCycle","","The requested operation would create a graph cycle.",1,null],[13,"Unsupported","","A feature isn't supported.",1,null],[13,"Io","","A std::io operation failed.",1,null],[13,"PortAudio","","A portaudio operation failed.",1,null],[13,"PortMidi","","A portmidi operation failed.",1,null],[6,"Result","","A specialized Result for oxcable.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"ioerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"portaudioerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"portmidierror"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"filters","oxcable","Linear IIR filters.",null,null],[0,"first_order","oxcable::filters","A first order IIR filter.",null,null],[3,"Filter","oxcable::filters::first_order","A single pole filter.",null,null],[4,"Message","","Defines the messages that the Filter supports.",null,null],[13,"SetMode","","Sets the filter's mode of operation.",2,null],[4,"FilterMode","","Specifies the mode for a first order `Filter`.",null,null],[13,"LowPass","","LowPass(cutoff)",3,null],[13,"HighPass","","HighPass(cutoff)",3,null],[13,"LowShelf","","LowShelf(cutoff, gain)",3,null],[13,"HighShelf","","HighShelf(cutoff, gain)",3,null],[11,"fmt","","",2,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"fmt","","",3,{"inputs":[{"name":"filtermode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"filtermode"}],"output":{"name":"filtermode"}}],[11,"new","","Creates a new first order filter with the provided mode. Each channel is\nfiltered independently.",4,{"inputs":[{"name":"filter"},{"name":"filtermode"},{"name":"usize"}],"output":{"name":"self"}}],[11,"handle_message","","",4,{"inputs":[{"name":"filter"},{"name":"message"}],"output":null}],[11,"num_inputs","","",4,{"inputs":[{"name":"filter"}],"output":{"name":"usize"}}],[11,"num_outputs","","",4,{"inputs":[{"name":"filter"}],"output":{"name":"usize"}}],[11,"tick","","",4,null],[0,"second_order","oxcable::filters","A second order IIR filter.",null,null],[3,"Filter","oxcable::filters::second_order","A two pole filter.",null,null],[4,"Message","","Defines the messages that the Filter supports.",null,null],[13,"SetMode","","Sets the filter's mode of operation.",5,null],[4,"FilterMode","","Specifies the mode for a second order `Filter`.",null,null],[13,"LowPass","","LowPass(cutoff)",6,null],[13,"HighPass","","HighPass(cutoff)",6,null],[13,"LowShelf","","LowShelf(cutoff, gain)",6,null],[13,"HighShelf","","HighShelf(cutoff, gain)",6,null],[13,"Peak","","Peak(cutoff, gain, Q)",6,null],[11,"fmt","","",5,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"fmt","","",6,{"inputs":[{"name":"filtermode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"filtermode"}],"output":{"name":"filtermode"}}],[11,"new","","Creates a new second order filter with the provided mode. Each channel\nis filtered independently.",7,{"inputs":[{"name":"filter"},{"name":"filtermode"},{"name":"usize"}],"output":{"name":"self"}}],[11,"handle_message","","",7,{"inputs":[{"name":"filter"},{"name":"message"}],"output":null}],[11,"num_inputs","","",7,{"inputs":[{"name":"filter"}],"output":{"name":"usize"}}],[11,"num_outputs","","",7,{"inputs":[{"name":"filter"}],"output":{"name":"usize"}}],[11,"tick","","",7,null],[0,"graph","oxcable","A container for audio devices in an acyclic graph.",null,null],[3,"DeviceGraph","oxcable::graph","An acyclic graph for audio devices.",null,null],[3,"AudioNodeIdx","","An identifier used to refer back to a node in the graph.",null,null],[11,"new","","Creates an empty graph.",8,{"inputs":[{"name":"devicegraph"}],"output":{"name":"self"}}],[11,"add_node","","Adds a new device into the graph, with no connections. Returns\na identifier that refers back to this device.",8,{"inputs":[{"name":"devicegraph"},{"name":"d"}],"output":{"name":"audionodeidx"}}],[11,"add_edge","","Connects two devices in the graph.",8,{"inputs":[{"name":"devicegraph"},{"name":"audionodeidx"},{"name":"usize"},{"name":"audionodeidx"},{"name":"usize"}],"output":{"name":"result"}}],[11,"tick","","",8,{"inputs":[{"name":"devicegraph"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"audionodeidx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"audionodeidx"}],"output":{"name":"audionodeidx"}}],[0,"io","oxcable","Tools for interacting with the outside world.",null,null],[0,"audio","oxcable::io","Audio IO from system sound devices.",null,null],[3,"AudioEngine","oxcable::io::audio","A system resources manager.",null,null],[3,"AudioIn","","Reads audio from the OS's default input device.",null,null],[3,"AudioOut","","Writes audio to the OS's default output device.",null,null],[11,"with_buffer_size","","Initializes the audio driver and sets the buffer size to be used for IO.",10,{"inputs":[{"name":"audioengine"},{"name":"usize"}],"output":{"name":"result"}}],[11,"default_input","","Opens an AudioIn using the default OS device.",10,{"inputs":[{"name":"audioengine"},{"name":"usize"}],"output":{"name":"result"}}],[11,"default_output","","Opens an AudioOut using the default OS device.",10,{"inputs":[{"name":"audioengine"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"audioin"}],"output":null}],[11,"num_inputs","","",11,{"inputs":[{"name":"audioin"}],"output":{"name":"usize"}}],[11,"num_outputs","","",11,{"inputs":[{"name":"audioin"}],"output":{"name":"usize"}}],[11,"tick","","",11,null],[11,"drop","","",12,{"inputs":[{"name":"audioout"}],"output":null}],[11,"num_inputs","","",12,{"inputs":[{"name":"audioout"}],"output":{"name":"usize"}}],[11,"num_outputs","","",12,{"inputs":[{"name":"audioout"}],"output":{"name":"usize"}}],[11,"tick","","",12,null],[0,"midi","oxcable::io","MIDI input from system MIDI devices.",null,null],[3,"MidiEngine","oxcable::io::midi","A system resources manager.",null,null],[3,"MidiIn","","Reads audio from the OS's default midi device.",null,null],[11,"open","","Initializes the MIDI driver.",13,{"inputs":[{"name":"midiengine"}],"output":{"name":"result"}}],[11,"default_input","","Opens a MidiIn using the default OS device.",13,{"inputs":[{"name":"midiengine"}],"output":{"name":"result"}}],[11,"choose_input","","Launches a command-line input selection message, then open a MidiIn\nusing the user selected device.",13,{"inputs":[{"name":"midiengine"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"midiin"}],"output":null}],[11,"get_events","","",14,{"inputs":[{"name":"midiin"},{"name":"time"}],"output":{"name":"vec"}}],[0,"wav","oxcable::io","Audio IO from WAV files.",null,null],[3,"WavReader","oxcable::io::wav","Reads audio from a wav file.",null,null],[3,"WavWriter","","Writes audio to a wav file.",null,null],[11,"open","","Returns a `WavReader` reading the provided file.",15,{"inputs":[{"name":"wavreader"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Retuns a `WavReader` reading anything implementing `Read`.",15,{"inputs":[{"name":"wavreader"},{"name":"r"}],"output":{"name":"result"}}],[11,"get_num_samples","","Returns the number of audio samples in the wav file.",15,{"inputs":[{"name":"wavreader"}],"output":{"name":"time"}}],[11,"is_done","","Returns true if we have read the entire wav file.",15,{"inputs":[{"name":"wavreader"}],"output":{"name":"bool"}}],[11,"restart","","Resets the reader to begin reading from the start of the file.",15,{"inputs":[{"name":"wavreader"}],"output":{"name":"result"}}],[11,"num_inputs","","",15,{"inputs":[{"name":"wavreader"}],"output":{"name":"usize"}}],[11,"num_outputs","","",15,{"inputs":[{"name":"wavreader"}],"output":{"name":"usize"}}],[11,"tick","","",15,null],[11,"create","","Returns a `WavWriter` writing to the provided file.",16,{"inputs":[{"name":"wavwriter"},{"name":"p"},{"name":"usize"}],"output":{"name":"result"}}],[11,"new","","Returns a `WavWriter` writing to anything implementing `Write`.",16,{"inputs":[{"name":"wavwriter"},{"name":"w"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",16,{"inputs":[{"name":"wavwriter"}],"output":null}],[11,"num_inputs","","",16,{"inputs":[{"name":"wavwriter"}],"output":{"name":"usize"}}],[11,"num_outputs","","",16,{"inputs":[{"name":"wavwriter"}],"output":{"name":"usize"}}],[11,"tick","","",16,null],[0,"level_detector","oxcable","An envelope estimator.",null,null],[3,"LevelDetector","oxcable::level_detector","Performs envelope estimation for a signal.",null,null],[11,"fmt","","",17,{"inputs":[{"name":"leveldetector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"leveldetector"}],"output":{"name":"leveldetector"}}],[11,"default","","Returns a level detector with default `tau` values tuned for reasonable\nperformance.",17,{"inputs":[{"name":"leveldetector"}],"output":{"name":"self"}}],[11,"new","","Returns a new level detector.",17,{"inputs":[{"name":"leveldetector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"compute_next_level","","Given the next input sample `s`, computes the current estimate of the\nenvelope value.",17,{"inputs":[{"name":"leveldetector"},{"name":"sample"}],"output":{"name":"f32"}}],[0,"mixers","oxcable","Tools for combining several audio signals.",null,null],[0,"adder","oxcable::mixers","",null,null],[3,"Adder","oxcable::mixers::adder","An adder.",null,null],[11,"new","","Returns a new adder with `num_inputs` inputs and one output.",18,{"inputs":[{"name":"adder"},{"name":"usize"}],"output":{"name":"self"}}],[11,"num_inputs","","",18,{"inputs":[{"name":"adder"}],"output":{"name":"usize"}}],[11,"num_outputs","","",18,{"inputs":[{"name":"adder"}],"output":{"name":"usize"}}],[11,"tick","","",18,null],[0,"gain","oxcable::mixers","",null,null],[3,"Gain","oxcable::mixers::gain","A gain filter.",null,null],[4,"Message","","Defines the messages that the Gain supports.",null,null],[13,"SetGain","","Sets the output gian, in decibels.",19,null],[11,"fmt","","",19,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"new","","Returns a new gain filter.",20,{"inputs":[{"name":"gain"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"handle_message","","",20,{"inputs":[{"name":"gain"},{"name":"message"}],"output":null}],[11,"num_inputs","","",20,{"inputs":[{"name":"gain"}],"output":{"name":"usize"}}],[11,"num_outputs","","",20,{"inputs":[{"name":"gain"}],"output":{"name":"usize"}}],[11,"tick","","",20,null],[0,"multiplexer","oxcable::mixers","",null,null],[3,"Multiplexer","oxcable::mixers::multiplexer","A multiplexer.",null,null],[4,"Message","","Defines the messages that the Multiplexer supports.",null,null],[13,"SelectChannel","","Selects the channel to pass to the output.",21,null],[11,"fmt","","",21,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"new","","Returns a new multiplexer with `num_inputs` input and one output.",22,{"inputs":[{"name":"multiplexer"},{"name":"usize"}],"output":{"name":"self"}}],[11,"select_input","","Selects the `i`th channel as the output. Returns Err if the channel is\nout of range.",22,{"inputs":[{"name":"multiplexer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"handle_message","","",22,{"inputs":[{"name":"multiplexer"},{"name":"message"}],"output":null}],[11,"num_inputs","","",22,{"inputs":[{"name":"multiplexer"}],"output":{"name":"usize"}}],[11,"num_outputs","","",22,{"inputs":[{"name":"multiplexer"}],"output":{"name":"usize"}}],[11,"tick","","",22,null],[0,"multiplier","oxcable::mixers","",null,null],[3,"Multiplier","oxcable::mixers::multiplier","A multiplier.",null,null],[11,"new","","Returns a new multiplier with `num_inputs` inputs and one output.",23,{"inputs":[{"name":"multiplier"},{"name":"usize"}],"output":{"name":"self"}}],[11,"num_inputs","","",23,{"inputs":[{"name":"multiplier"}],"output":{"name":"usize"}}],[11,"num_outputs","","",23,{"inputs":[{"name":"multiplier"}],"output":{"name":"usize"}}],[11,"tick","","",23,null],[0,"oscillator","oxcable","A antialiasing oscillator.",null,null],[3,"Oscillator","oxcable::oscillator","An oscillator that generates a periodic waveform.",null,null],[4,"Message","","Defines the messages that the Oscillator supports.",null,null],[13,"SetFreq","","Sets the frequency in Hz.",24,null],[13,"SetWaveform","","Sets the waveform type.",24,null],[13,"SetLFOIntensity","","Sets the LFO vibrato depth, in steps.",24,null],[13,"SetTranspose","","Sets the pitch transposition, in steps.",24,null],[13,"SetBend","","Sets the pitch bend, in steps.",24,null],[4,"AntialiasType","","Antialiasing method for certain waveforms.",null,null],[13,"Aliased","","Naive, aliasing waveforms.",25,null],[13,"PolyBlep","","Antialiasing using PolyBLEP.",25,null],[4,"Waveform","","Oscillator waveforms.",null,null],[13,"Sine","","A sine wave.",26,null],[13,"Saw","","A saw wave.",26,null],[13,"Square","","A square wave.",26,null],[13,"Tri","","A triangle wave.",26,null],[13,"WhiteNoise","","Pure white noise.",26,null],[13,"PulseTrain","","A series of impulses.",26,null],[11,"fmt","","",24,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"fmt","","",25,{"inputs":[{"name":"antialiastype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"antialiastype"}],"output":{"name":"antialiastype"}}],[11,"fmt","","",26,{"inputs":[{"name":"waveform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"waveform"}],"output":{"name":"waveform"}}],[11,"new","","Returns an oscillator with the specified waveform.",27,{"inputs":[{"name":"oscillator"},{"name":"waveform"}],"output":{"name":"self"}}],[11,"freq","","Sets the frequency of the waveform, and return the same oscillator.",27,{"inputs":[{"name":"oscillator"},{"name":"f32"}],"output":{"name":"self"}}],[11,"transpose","","Sets the frequency transposition (in steps), and return the same\noscillator.",27,{"inputs":[{"name":"oscillator"},{"name":"f32"}],"output":{"name":"self"}}],[11,"lfo_intensity","","Sets the intensity of the LFO vibrato, and return the same oscillator.",27,{"inputs":[{"name":"oscillator"},{"name":"f32"}],"output":{"name":"self"}}],[11,"handle_message","","",27,{"inputs":[{"name":"oscillator"},{"name":"message"}],"output":null}],[11,"num_inputs","","",27,{"inputs":[{"name":"oscillator"}],"output":{"name":"usize"}}],[11,"num_outputs","","",27,{"inputs":[{"name":"oscillator"}],"output":{"name":"usize"}}],[11,"tick","","",27,null],[0,"tick","oxcable","A trait for objects that process in discrete time steps.",null,null],[8,"Tick","oxcable::tick","Methods for processing something in discrete time steps. By defining how to\nperform a single tick, this trait gives several convenience methods.",null,null],[10,"tick","","Handles one time step.",28,{"inputs":[{"name":"tick"}],"output":null}],[11,"tick_n_times","","Runs `tick` `n` times. Returns after processing.",28,{"inputs":[{"name":"tick"},{"name":"time"}],"output":null}],[11,"tick_forever","","Ticks into infinity. Never returns.",28,{"inputs":[{"name":"tick"}],"output":null}],[11,"tick_until_enter","","Ticks while waiting for the user to press `Enter`. When enter is\npressed, ticking stops and the method returns.",28,{"inputs":[{"name":"tick"}],"output":null}],[0,"types","oxcable","Global types and constants.",null,null],[3,"MidiEvent","oxcable::types","The datatype of a MIDI event.",null,null],[12,"channel","","The MIDI channel this event was sent to.",29,null],[12,"time","","The timestamp of this event.",29,null],[12,"payload","","The message contents.",29,null],[4,"MidiMessage","","The contents of a MIDI message.",null,null],[13,"NoteOn","","NoteOn(note number, velocity)",30,null],[13,"NoteOff","","NoteOff(note number, velocity)",30,null],[13,"PitchBend","","PitchBend(bend)",30,null],[13,"PolyphonicAftertouch","","PolyphonicAftertouch(note number, pressure)",30,null],[13,"ChannelAftertouch","","ChannelAftertouch(pressure)",30,null],[13,"SustainPedal","","SustainPedal(on/off)",30,null],[13,"Portamento","","Portamento(on/off)",30,null],[13,"Sostenuto","","Sostenuto(on/off)",30,null],[13,"SoftPedal","","SoftPedal(on/off)",30,null],[13,"LegatoPedal","","LegatoPedal(on/off)",30,null],[13,"Hold2","","Hold2(on/off)",30,null],[13,"ControlChange","","ControlChange(controller, value)",30,null],[13,"ProgramChange","","ProgramChange(num)",30,null],[13,"Other","","Other(status, byte1, byte2)",30,null],[6,"Sample","","The datatype of a single audio sample.",null,null],[6,"Time","","The datatype of a single time tick.",null,null],[7,"SAMPLE_RATE","","The global sample rate, in Hz.",null,null],[8,"AudioDevice","","A device that processes and/or generates audio.",null,null],[10,"num_inputs","","Returns the number of input channels the device accepts.",31,{"inputs":[{"name":"audiodevice"}],"output":{"name":"usize"}}],[10,"num_outputs","","Return sthe number of output channels the device returns.",31,{"inputs":[{"name":"audiodevice"}],"output":{"name":"usize"}}],[10,"tick","","Processes a single frame worth of audio data. This function should be\ncalled once per time step, starting at `t=0`.",31,null],[8,"MessageReceiver","","A device that receives messages.",null,null],[16,"Msg","","The type of messages to be received.",32,null],[10,"handle_message","","Handles the message.",32,{"inputs":[{"name":"messagereceiver"},{"name":"msg"}],"output":null}],[8,"MidiDevice","","A device that generates MIDI events.",null,null],[10,"get_events","","Returns any events scheduled for time `t`.",33,{"inputs":[{"name":"mididevice"},{"name":"time"}],"output":{"name":"vec"}}],[11,"fmt","","",29,{"inputs":[{"name":"midievent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"midievent"}],"output":{"name":"midievent"}}],[11,"fmt","","",30,{"inputs":[{"name":"midimessage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"midimessage"}],"output":{"name":"midimessage"}}],[0,"utils","oxcable","Utility functions and objects for signal processing.",null,null],[0,"helpers","oxcable::utils","A collection of small utility functions.",null,null],[5,"decibel_to_ratio","oxcable::utils::helpers","Converts a decibel ratio to an amplitude multiplier.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ratio_to_decibel","","Converts an amplitude multiplier to decibels.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"midi_note_to_freq","","Converts a MIDI note number to frequency in Hz.",null,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[0,"fft","oxcable::utils","An efficient Fast Fourier transform.",null,null],[3,"Transformer","oxcable::utils::fft","A container for precomputed values to perform FFTs of a fixed size.",null,null],[11,"new","","Initializes a transformer to perform FFTs of the provided size, rounded\nup to the nearest power of two.",34,{"inputs":[{"name":"transformer"},{"name":"usize"}],"output":{"name":"self"}}],[11,"get_size","","Returns the size FFT this Transformer performs.",34,{"inputs":[{"name":"transformer"}],"output":{"name":"usize"}}],[11,"fft","","Performs an FFT on `input`, and place the result in `output`.",34,null],[11,"ifft","","Performs an inverse FFT on `input`, and place the result in `output`.",34,null],[0,"ringbuffer","oxcable::utils","A generic, fixed-size ring buffer.",null,null],[3,"RingBuffer","oxcable::utils::ringbuffer","A generic ring buffer.",null,null],[3,"Iter","","A RingBuffer iterator.",null,null],[3,"Values","","An Ringbuffer values iterator.",null,null],[11,"fmt","","",35,{"inputs":[{"name":"ringbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"ringbuffer"}],"output":{"name":"ringbuffer"}}],[11,"new","","Returns an empty ring buffer that can hold at most `capacity` elements.",35,{"inputs":[{"name":"ringbuffer"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Returns the number of elements the ringbuffer currently contains.",35,{"inputs":[{"name":"ringbuffer"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the number of elements the ringbuffer can hold at one time.",35,{"inputs":[{"name":"ringbuffer"}],"output":{"name":"usize"}}],[11,"times","","Returns the range of timestamps stored in the ringbuffer, as a tuple\n(first, last). First is inclusive, while last is exlusive.",35,null],[11,"get","","Attempts to return a ref to the data stored at time `t`. If the requested\ntime is not in the buffer, instead returns `None`.",35,{"inputs":[{"name":"ringbuffer"},{"name":"time"}],"output":{"name":"option"}}],[11,"get_mut","","Attempts to return a mutable ref to the data stored at time `t`. If the\nrequested time is not in the buffer, instead returns `None`.",35,{"inputs":[{"name":"ringbuffer"},{"name":"time"}],"output":{"name":"option"}}],[11,"push","","Pushes the supplied data onto the end of the buffer. If the buffer is\nfull, this will overwrite the oldest data.",35,{"inputs":[{"name":"ringbuffer"},{"name":"t"}],"output":null}],[11,"clear","","Clears all the elements from the buffer.",35,{"inputs":[{"name":"ringbuffer"}],"output":null}],[11,"values","","Returns an iterator than returns the buffer's values.",35,{"inputs":[{"name":"ringbuffer"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator that pairs values with their timestamp.",35,{"inputs":[{"name":"ringbuffer"}],"output":{"name":"iter"}}],[11,"pop","","Removes the oldest element from the ringbuffer and return it. If there\nare no elements, returns `None` insteads.",35,{"inputs":[{"name":"ringbuffer"}],"output":{"name":"option"}}],[11,"resize","","Resizes the ringbuffer to hold up to `capacity` elements. If the new\ncapacity is smaller than the old one, then the oldest elements will be\nremoved from the buffer.",35,{"inputs":[{"name":"ringbuffer"},{"name":"usize"}],"output":null}],[11,"index","","",35,{"inputs":[{"name":"ringbuffer"},{"name":"time"}],"output":{"name":"t"}}],[11,"index_mut","","",35,{"inputs":[{"name":"ringbuffer"},{"name":"time"}],"output":{"name":"t"}}],[11,"from","","",35,null],[11,"extend","","",35,{"inputs":[{"name":"ringbuffer"},{"name":"i"}],"output":null}],[11,"next","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"count","","",36,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",37,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"count","","",37,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[0,"windows","oxcable::utils","A collection of window functions.",null,null],[5,"bartlett","oxcable::utils::windows","Returns a bartlett (triangular) window of size `n`.",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[5,"generalized_cosine_window","","Returns a generalized cosine window of size `n`, with the provided\ncoefficients.",null,null],[5,"hanning","","Returns a hanning window of size `n`.",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[5,"hamming","","Returns a hamming window of size `n`.",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[5,"blackman","","Returns a blackman window of size `n`.",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[5,"kaiser","","Returns a kaiser window of size `n`, with the provided beta.",null,{"inputs":[{"name":"sample"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"voice_array","oxcable","A polyphonic voice array.",null,null],[3,"VoiceArray","oxcable::voice_array","A manager for a polyphonic set of voices.",null,null],[11,"new","","Creates a new VoiceArray from the provided vector of voices.",38,{"inputs":[{"name":"voicearray"},{"name":"vec"}],"output":{"name":"self"}}],[11,"iter","","Returns an iterator over the voice objects.",38,{"inputs":[{"name":"voicearray"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the voice objects.",38,{"inputs":[{"name":"voicearray"}],"output":{"name":"itermut"}}],[11,"note_on","","Selects a new voice, marks it as playing, and loans it out for\nmodification.",38,{"inputs":[{"name":"voicearray"},{"name":"u8"}],"output":{"name":"t"}}],[11,"note_off","","Finds the voice playing the provided note, marks it as free, then loans\nit out for modification. If no voice is playing the provided note, then\n`None` is returned instead.",38,{"inputs":[{"name":"voicearray"},{"name":"u8"}],"output":{"name":"option"}}],[0,"wrappers","oxcable","Tools for wrapping devices.",null,null],[3,"Buffered","oxcable::wrappers","Bundles an `AudioDevice` with allocated input and output buffers.",null,null],[12,"device","","The AudioDevice being wrapped.",39,null],[12,"inputs","","The input buffer.",39,null],[12,"outputs","","The output buffer.",39,null],[3,"BufferedOutput","","Bundles an `AudioDevice` with an allocated output buffer.",null,null],[12,"device","","The AudioDevice being wrapped.",40,null],[12,"outputs","","The output buffer.",40,null],[3,"Messaged","","Bundles a `MessageReceiver` with threaded message passing.",null,null],[11,"tick","","Calls the device's tick method using the wrapper's buffers.",39,{"inputs":[{"name":"buffered"},{"name":"time"}],"output":null}],[11,"from","","",39,{"inputs":[{"name":"buffered"},{"name":"d"}],"output":{"name":"self"}}],[11,"deref","","",39,{"inputs":[{"name":"buffered"}],"output":{"name":"d"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"buffered"}],"output":{"name":"d"}}],[11,"tick","","Calls the device's tick method using the wrapper's buffers.",40,null],[11,"from","","",40,{"inputs":[{"name":"bufferedoutput"},{"name":"d"}],"output":{"name":"self"}}],[11,"deref","","",40,{"inputs":[{"name":"bufferedoutput"}],"output":{"name":"d"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"bufferedoutput"}],"output":{"name":"d"}}],[11,"get_sender","","Return the sending half of our communication channel.",41,{"inputs":[{"name":"messaged"}],"output":{"name":"sender"}}],[11,"from","","",41,{"inputs":[{"name":"messaged"},{"name":"d"}],"output":{"name":"self"}}],[11,"num_inputs","","",41,{"inputs":[{"name":"messaged"}],"output":{"name":"usize"}}],[11,"num_outputs","","",41,{"inputs":[{"name":"messaged"}],"output":{"name":"usize"}}],[11,"tick","","",41,null],[11,"deref","","",41,{"inputs":[{"name":"messaged"}],"output":{"name":"d"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"messaged"}],"output":{"name":"d"}}]],"paths":[[3,"DeviceChain"],[4,"Error"],[4,"Message"],[4,"FilterMode"],[3,"Filter"],[4,"Message"],[4,"FilterMode"],[3,"Filter"],[3,"DeviceGraph"],[3,"AudioNodeIdx"],[3,"AudioEngine"],[3,"AudioIn"],[3,"AudioOut"],[3,"MidiEngine"],[3,"MidiIn"],[3,"WavReader"],[3,"WavWriter"],[3,"LevelDetector"],[3,"Adder"],[4,"Message"],[3,"Gain"],[4,"Message"],[3,"Multiplexer"],[3,"Multiplier"],[4,"Message"],[4,"AntialiasType"],[4,"Waveform"],[3,"Oscillator"],[8,"Tick"],[3,"MidiEvent"],[4,"MidiMessage"],[8,"AudioDevice"],[8,"MessageReceiver"],[8,"MidiDevice"],[3,"Transformer"],[3,"RingBuffer"],[3,"Iter"],[3,"Values"],[3,"VoiceArray"],[3,"Buffered"],[3,"BufferedOutput"],[3,"Messaged"]]};
initSearch(searchIndex);
